package entity

import (
	"fmt"
	"strings"
	"time"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

type Alias struct {
	gorm.Model
	AliasGroup  string           `json:"aliasGroup"`
	Name        string           `json:"name"`
	Destination string           `json:"destination"`
	Hits        []*EventAliasHit `gorm:"foreignKey:alias_fk"`
}

var (
	AliasDynamodbKeySeparator = "|"
)

func (alias Alias) GetDynamodbPk() string {
	return strings.Join([]string{alias.AliasGroup, alias.Name}, AliasDynamodbKeySeparator)
}
func (alias Alias) Validate() error {
	if len(alias.AliasGroup) == 0 {
		return errors.New(fmt.Sprintf("required field \"%s\" is empty", "AliasGroup"))
	}
	if len(alias.Name) == 0 {
		return errors.New(fmt.Sprintf("required field \"%s\" is empty", "Name"))
	}
	if len(alias.Destination) == 0 {
		return errors.New(fmt.Sprintf("required field \"%s\" is empty", "Destination"))
	}
	if strings.Contains(alias.AliasGroup, AliasDynamodbKeySeparator) {
		return errors.New(fmt.Sprintf("\"%s\" should not contain \"%s\"", "AliasGroup", AliasDynamodbKeySeparator))
	}
	if strings.Contains(alias.Name, AliasDynamodbKeySeparator) {
		return errors.New(fmt.Sprintf("\"%s\" should not contain \"%s\"", "Name", AliasDynamodbKeySeparator))
	}
	return nil
}

func GetGroupAndNameFromDynamodbPk(dynamodbPk string) (group, name string, err error) {
	splitted := strings.Split(dynamodbPk, AliasDynamodbKeySeparator)
	if len(splitted) != 2 {
		return "", "", errors.New(fmt.Sprintf("the length of the list generated by splitting dynmodbPk(%s) by sperator(%s): %d",
			dynamodbPk, AliasDynamodbKeySeparator, len(splitted)))
	}
	group = splitted[0]
	name = splitted[1]
	err = nil

	return
}

type EventAliasHit struct {
	gorm.Model
	Hit     bool `json:"hit"`
	AliasFK uint `json:"aliasFk"`
	//Alias *Alias `json:"alias"`
	// TODO: To implement a user system.
	// The type of User is just string for right now.
	User string `json:"user"`
}

type User struct {
	Username  string   `gorm:"primaryKey"`
	Groups    []*Group `gorm:"many2many:users_groups;" dynamodbav:"-"`
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt gorm.DeletedAt `gorm:"index"`
}

type Group struct {
	Name      string  `gorm:"primaryKey"`
	Users     []*User `gorm:"many2many:users_groups;"`
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt gorm.DeletedAt `gorm:"index"`
}
